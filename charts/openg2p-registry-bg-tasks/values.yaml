global:
  keycloakBaseUrl: https://keycloak.openg2p.sandbox.net
  keycloakIssuerUrl: '{{ tpl .Values.global.keycloakBaseUrl $ }}/realms/master'

## Add labels to all the deployed resources
##
commonLabels: {}

## Add annotations to all the deployed resources
##
commonAnnotations: {}

commonEnvVars: {}
commonEnvVarsFrom: {}

## Specifies whether a ServiceAccount should be created
##
serviceAccount:
  create: true
  ## The name of the ServiceAccount to use.
  ## If not set and create is true, a name is generated using the fullname template
  ##
  name: ''

producer:
  enabled: true

  replicaCount: 1

  podLabels:
    app.kubernetes.io/name: '{{ include "common.names.name" . }}-producer'
  podAnnotations: {}

  updateStrategy:
    type: RollingUpdate

  image:
    registry: docker.io
    repository: openg2p/openg2p-registry-bg-tasks-producer
    tag: "1.1"
    pullPolicy: Always
    # pullSecrets:
    #   - myRegistryKeySecretName

  hostAliases: []
  affinity: {}
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  nodeSelector: {}
  tolerations: []
  # priorityClassName: ""
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  initContainers: []
  lifecycleHooks: {}
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true

  resources: {}

  startupProbe:
    enabled: false
    httpGet:
      path: /ping
      port: 8000
    initialDelaySeconds: 0
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 30
    successThreshold: 1

  livenessProbe:
    enabled: false
    httpGet:
      path: /ping
      port: 8000
    initialDelaySeconds: 20
    periodSeconds: 30
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1

  readinessProbe:
    enabled: false
    httpGet:
      path: /ping
      port: 8000
    initialDelaySeconds: 0
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1

  sidecars: []

  envVars:
    REGISTRY_CELERY_BEAT_DB_HOSTNAME: '{{ tpl .Values.postgresqlInstallationName $ }}'
    REGISTRY_CELERY_BEAT_DB_PORT: 5432
    REGISTRY_CELERY_BEAT_DB_DBNAME: socialregistrydb
    REGISTRY_CELERY_BEAT_DB_USERNAME: sruser

    REGISTRY_CELERY_BEAT_CELERY_BROKER_URL: redis://{{ tpl .Values.redisInstallationName $ }}:6379/0
    REGISTRY_CELERY_BEAT_CELERY_BACKEND_URL: redis://{{ tpl .Values.redisInstallationName $ }}:6379/0
  envVarsFrom:
    REGISTRY_CELERY_BEAT_DB_PASSWORD:
      secretKeyRef:
        name: '{{ tpl .Values.postgresqlInstallationName $ }}'
        key: password

  postgresCheckerInit:
    enabled: true
    image: jbergknoff/postgresql-client
    command:
    - 'sh'
    - '-c'
    - |
      until pg_isready \
        -U "${REGISTRY_CELERY_BEAT_DB_USERNAME}" \
        -h "${REGISTRY_CELERY_BEAT_DB_HOSTNAME}" \
        -p "${REGISTRY_CELERY_BEAT_DB_PORT:-5432}" \
        -d "${REGISTRY_CELERY_BEAT_DB_DBNAME:-socialregistrydb}"; do
        sleep 3;
      done

worker:
  enabled: true

  replicaCount: 1

  podLabels:
    app.kubernetes.io/name: '{{ include "common.names.name" . }}-worker'
  podAnnotations: {}

  updateStrategy:
    type: RollingUpdate

  image:
    registry: docker.io
    repository: openg2p/openg2p-registry-bg-tasks-worker
    tag: "1.1"
    pullPolicy: Always
    # pullSecrets:
    #   - myRegistryKeySecretName

  hostAliases: []
  affinity: {}
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  nodeSelector: {}
  tolerations: []
  # priorityClassName: ""
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  initContainers: []
  lifecycleHooks: {}
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true

  resources: {}

  startupProbe:
    enabled: false
    httpGet:
      path: /ping
      port: 8000
    initialDelaySeconds: 0
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 30
    successThreshold: 1

  livenessProbe:
    enabled: false
    httpGet:
      path: /ping
      port: 8000
    initialDelaySeconds: 20
    periodSeconds: 30
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1

  readinessProbe:
    enabled: false
    httpGet:
      path: /ping
      port: 8000
    initialDelaySeconds: 0
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1

  sidecars: []

  envVars:
    REGISTRY_CELERY_WORKERS_DB_HOSTNAME: '{{ tpl .Values.postgresqlInstallationName $ }}'
    REGISTRY_CELERY_WORKERS_DB_PORT: 5432
    REGISTRY_CELERY_WORKERS_DB_DBNAME: socialregistrydb
    REGISTRY_CELERY_WORKERS_DB_USERNAME: sruser

    REGISTRY_CELERY_WORKERS_CELERY_BROKER_URL: redis://{{ tpl .Values.redisInstallationName $ }}:6379/0
    REGISTRY_CELERY_WORKERS_CELERY_BACKEND_URL: redis://{{ tpl .Values.redisInstallationName $ }}:6379/0

    REGISTRY_CELERY_WORKERS_AUTH_URL: '{{ tpl .Values.global.keycloakIssuerUrl $ }}/protocol/openid-connect/token'
    REGISTRY_CELERY_WORKERS_AUTH_CLIENT_ID: 'openg2p-sr-{{ .Release.Namespace }}'
    REGISTRY_CELERY_WORKERS_AUTH_CLIENT_SECRET: ''

    REGISTRY_CELERY_WORKERS_MOSIP_GET_UIN_URL: 'http://{{ tpl .Values.idgeneratorInstallationName $ }}/v1/idgenerator/uin'
    REGISTRY_CELERY_WORKERS_MOSIP_UPDATE_UIN_URL: 'http://{{ tpl .Values.idgeneratorInstallationName $ }}/v1/idgenerator/uin'
  envVarsFrom:
    REGISTRY_CELERY_WORKERS_DB_PASSWORD:
      secretKeyRef:
        name: '{{ tpl .Values.postgresqlInstallationName $ }}'
        key: password

  postgresCheckerInit:
    enabled: true
    image: jbergknoff/postgresql-client
    command:
    - 'sh'
    - '-c'
    - |
      until pg_isready \
        -U "${REGISTRY_CELERY_WORKERS_DB_USERNAME}" \
        -h "${REGISTRY_CELERY_WORKERS_DB_HOSTNAME}" \
        -p "${REGISTRY_CELERY_WORKERS_DB_PORT:-5432}" \
        -d "${REGISTRY_CELERY_WORKERS_DB_DBNAME:-socialregistrydb}"; do
        sleep 3;
      done

postgresqlInstallationName: '{{ .Release.Name }}-postgresql'
redisInstallationName: '{{ .Release.Name }}-redis-master'
idgeneratorInstallationName: '{{ .Release.Name }}-idgenerator'
